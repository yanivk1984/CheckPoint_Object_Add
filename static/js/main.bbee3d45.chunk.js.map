{"version":3,"sources":["components/topBar.js","components/object.js","components/objects.js","components/submit.js","static/js/checkPointInteractions.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","style","backgroundColor","height","alignItems","border","marginBottom","fontFamily","marginLeft","React","Component","Object","handleChange","e","setState","target","name","value","this","props","index","state","onChange","ip","comment","onClick","deleteObject","className","Objects","validateIp","test","trim","alert","addObject","handleKeys","id","display","width","objects","map","obj","key","Submit","container","padding","position","buttonStyle","general","input","firstBtn","group","submit","a","interactions","SmartConsoleInteractions","requestCommit","App","checkIfNameExists","counter","tmp_name","i","length","parseInt","toString","checkIfIpExists","ip_tmp","lastDigit","match","replace","push","objName","filter","addObjects","then","console","log","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bbee3d45.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport class TopBar extends React.Component {\r\n    render() {\r\n        const style = {\r\n            backgroundColor: \"#E65684\",\r\n            height: \"50px\",\r\n            alignItems: \"center\",\r\n            border: \"black solid 1px\",\r\n            marginBottom: \"10px\",\r\n            fontFamily: \"Sans-Serif\",\r\n        };\r\n        const textStyle = {\r\n            marginLeft: \"10px\"\r\n        };\r\n\r\n        return (\r\n            <div style={style}>\r\n                <h3 style={textStyle}>Check Point Object Adder</h3>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nclass Object extends React.Component {\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n                <tr >\r\n                    <td>{this.props.index}</td>\r\n                    <td><input value={this.props.state.name} name=\"name\" onChange={this.handleChange}/></td>\r\n                    <td><input value={this.props.state.ip} name=\"ip\" onChange={this.handleChange}/></td>\r\n                    <td><input value={this.props.state.comment} name=\"comment\" onChange={this.handleChange}/></td>\r\n                    <td onClick={() => this.props.deleteObject(this.props.state.name)}>\r\n                        <button className=\"btn btn-danger\">Delete</button>\r\n                    </td>\r\n                </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Object","import React from 'react'\r\nimport Object from \"./object\";\r\n\r\nclass Objects extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.style = {\r\n            display: \"inline\",\r\n            width: \"60%\"\r\n        };\r\n\r\n        this.state = {\r\n            id: 0,\r\n            name: \"\",\r\n            ip: \"\",\r\n            comment: \"\",\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    };\r\n\r\n    validateIp = () => {\r\n        if (!/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(this.state.ip.trim())) {\r\n            alert(\"This is not valid ip-address\");\r\n            return \"\"\r\n        }\r\n\r\n        this.props.addObject(this.state)\r\n    };\r\n\r\n    handleKeys = () => {\r\n        let id = this.state.id;\r\n        id++;\r\n        this.setState({id: id});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <table style={this.style} className=\"table table-hover\">\r\n                <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Object Name</th>\r\n                    <th>IP Address</th>\r\n                    <th>Comment</th>\r\n                    <th>\r\n                        <button className=\"btn btn-info\">Action</button>\r\n                    </th>\r\n\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>#</td>\r\n                    <td><input value={this.state.name} name=\"name\" onChange={this.handleChange}/></td>\r\n                    <td><input value={this.state.ip} name=\"ip\" onChange={this.handleChange}/></td>\r\n                    <td><input value={this.state.comment} name=\"comment\" onChange={this.handleChange}/></td>\r\n                    <td>\r\n                        <button onClick={this.validateIp} onChange={this.handleChange} className=\"btn btn-primary\">Add\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n\r\n                {this.props.state.objects.map((obj, index) => (\r\n                    <Object\r\n                        key={obj.name}\r\n                        index={index}\r\n                        state={obj}\r\n                        deleteObject={this.props.deleteObject}\r\n                        onClick={this.props.addObject}\r\n                    />\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Objects","import React from \"react\";\r\n\r\nexport class Submit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.container = {\r\n            border: \"solid black 1px\",\r\n            marginLeft: \"40px\",\r\n            display: \"inline\",\r\n            padding: \"20px\",\r\n            position: \"absolute\"\r\n        };\r\n\r\n        this.buttonStyle = {\r\n            marginLeft: \"10px\",\r\n            backgroundColor: \"green\",\r\n            border: \"none\",\r\n            display: \"inline\",\r\n        };\r\n\r\n        this.general = {\r\n            position: \"relative\",\r\n            display: \"inline\",\r\n        };\r\n\r\n        this.input = {\r\n            display: \"inline\",\r\n            height: \"30px\",\r\n            padding: \"0px !important\",\r\n            marginLeft: \"10px\",\r\n            marginBottom: \"0px\"\r\n        };\r\n\r\n        this.firstBtn = {\r\n            display: \"block\",\r\n        };\r\n\r\n        this.state = {\r\n            group: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.container}>\r\n                <button style={{...this.buttonStyle, ...this.firstBtn}} className=\"btn btn-primary\" onClick={this.props.submit} >Submit</button>\r\n                <div style={this.general}>\r\n                    <button style={this.buttonStyle} className=\"btn btn-primary\">Submit To Group</button>\r\n                    <input style={this.input} value={this.group} name=\"group\" onChange={this.handleChange}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import SmartConsoleInteractions from 'smart-console-interactions';\r\n\r\n\r\nexport async function addObjects() {\r\n    const interactions = new SmartConsoleInteractions();\r\n    const context = await interactions.requestCommit({\"commands\": [\"add host name new ip-address 1.2.3.4\", \"add host name new2 ip-address 1.2.3.5\"]}, \"onCommit\");\r\n}\r\n\r\n\r\n// //request to commit changes\r\n// smxProxy.sendRequest(\"request-commit\", {\"commands\" : [ \"add host ...\",\"add host ...\" ]}, \"onCommit\");\r\n//\r\n// //callback\r\n// function onCommit(value) {\r\n//     var result = JSON.stringify(value);\r\n//     //do something with the JSON formatted context\r\n// }","import React from 'react';\nimport {TopBar} from \"./components/topBar\";\nimport Objects from \"./components/objects\";\nimport {Submit} from \"./components/submit\";\nimport {addObjects} from \"./static/js/checkPointInteractions\"\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            ip: \"\",\n            comment: \"\",\n            objects: []\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n    };\n\n    checkIfNameExists = (name) => {\n        let counter = \"1\";\n        let tmp_name = name;\n        for (let i = 0; i < this.state.objects.length; i++) {\n            if (this.state.objects[i].name === tmp_name) {\n                parseInt(counter);\n                counter++;\n                tmp_name = name + \"_\" + counter.toString();\n                i = 0;\n            }\n        }\n        return tmp_name;\n    };\n\n    checkIfIpExists = ip => {\n        let ip_tmp = ip;\n        for (let i = 0; i < this.state.objects.length; i++) {\n            if (this.state.objects[i].ip === ip_tmp) {\n                let lastDigit = parseInt(ip_tmp.match(/\\d+$/).toString());\n                lastDigit++;\n                ip_tmp = ip.replace(/\\d+$/, lastDigit.toString());\n                i = 0;\n            }\n        }\n        return ip_tmp;\n    };\n\n    addObject = obj => {\n        let name = this.checkIfNameExists(obj.name.trim());\n        let ip = this.checkIfIpExists(obj.ip.trim());\n        let comment = obj.comment;\n\n        if (name && ip) {\n            let objects = [...this.state.objects];\n            let counter = this.state.counter + 1;\n\n            objects.push({\n                counter: counter,\n                name: name,\n                ip: ip,\n                comment: comment\n            });\n            this.setState({objects: objects});\n        }\n    };\n\n    deleteObject = objName => {\n        let objects = [...this.state.objects];\n        objects = objects.filter(obj => obj.name !== objName);\n        this.setState({objects: objects})\n    };\n\n    submit = () => {\n        addObjects().then(\n            console.log(\"finished\")\n        )\n    };\n\n    render() {\n        return (\n            <div>\n                <TopBar/>\n                <Objects\n                    state={this.state}\n                    addObject={this.addObject}\n                    deleteObject={this.deleteObject}\n                />\n                <Submit\n                    submit={this.submit}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'jquery/dist/jquery.min.js'\nimport 'bootstrap/dist/js/bootstrap.min.js'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}